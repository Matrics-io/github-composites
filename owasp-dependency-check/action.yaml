name: OWASP Dependency-Check
description: "Run Dependency-Check using a prebuilt image with cached NVD data"
inputs:
  image:
    description: "Dependency-Check Docker image to use"
    default: ""
  scan_path:
    description: "Path to scan"
    default: "."
  out_dir:
    description: "Reports directory"
    default: "dependency-check-reports"
  project_name:
    description: "Project name"
    default: "${{ github.repository }}@${{ github.sha }}"
  formats:
    description: "Report formats"
    default: "XML"
  fail_on_cvss:
    description: "Fail if CVSS >= threshold"
    default: "7.0"
  suppression_file:
    description: "Suppression XML file (optional)"
    default: ""
  timeout:
    description: "Timeout for dependency check in minutes"
    default: "30"

runs:
  using: "composite"
  steps:
    - name: Ensure output dir
      shell: bash
      run: |
        mkdir -p "${{ inputs.out_dir }}"
        echo "Created output directory: ${{ inputs.out_dir }}"

    - name: Debug environment
      shell: bash
      run: |
        echo "=== Dependency-Check Debug Info ==="
        echo "Image: ${{ inputs.image }}"
        echo "Scan path: ${{ inputs.scan_path }}"
        echo "Output dir: ${{ inputs.out_dir }}"
        echo "Project name: ${{ inputs.project_name }}"
        echo "Formats: ${{ inputs.formats }}"
        echo "Fail on CVSS: ${{ inputs.fail_on_cvss }}"
        echo "Suppression file: ${{ inputs.suppression_file }}"
        echo "Timeout: ${{ inputs.timeout }} minutes"
        echo "Workspace: ${GITHUB_WORKSPACE}"
        echo "Current directory contents:"
        ls -la "${{ inputs.scan_path }}" || echo "Scan path not found"
        echo "==================================="

    - name: Test Docker image
      shell: bash
      run: |
        echo "Testing Docker image access..."
        docker run --rm "${{ inputs.image }}" --version || {
          echo "ERROR: Failed to run Docker image or get version"
          exit 1
        }

    - name: Run Dependency-Check (no update)
      shell: bash
      run: |
        echo "Starting Dependency-Check scan..."
        
        # Use a much simpler project name to avoid any path issues
        SIMPLE_PROJECT_NAME="dependency-check-$(date +%Y%m%d-%H%M%S)"
        echo "Using simplified project name: ${SIMPLE_PROJECT_NAME}"
        
        # Build suppression argument if provided
        SUPPRESSION_ARG=""
        if [ -n "${{ inputs.suppression_file }}" ]; then
          if [ -f "${{ inputs.suppression_file }}" ]; then
            SUPPRESSION_ARG="--suppression /src/${{ inputs.suppression_file }}"
            echo "Using suppression file: ${{ inputs.suppression_file }}"
          else
            echo "WARNING: Suppression file specified but not found: ${{ inputs.suppression_file }}"
          fi
        fi

        # Ensure output directory has proper permissions
        mkdir -p "${{ inputs.out_dir }}"
        chmod 755 "${{ inputs.out_dir }}"
        
        # Check available disk space
        echo "Available disk space:"
        df -h "${GITHUB_WORKSPACE}"

        echo "Running Dependency-Check with format fallback strategy..."
        
        # First, try with the requested format plus HTML as backup
        echo "Trying primary format: ${{ inputs.formats }} with HTML backup"
        
        # Run with timeout and verbose output - use multiple -f flags for multiple formats
        timeout $((${{ inputs.timeout }} * 60)) docker run --rm \
          -e JAVA_OPTS="-Xmx2048m -Xms512m" \
          -v "${GITHUB_WORKSPACE}:/src" \
          -w /src \
          "${{ inputs.image }}" \
          --scan "/src/${{ inputs.scan_path }}" \
          --out "/src/${{ inputs.out_dir }}" \
          --format "${{ inputs.formats }}" \
          --format "HTML" \
          --project "${SIMPLE_PROJECT_NAME}" \
          --failOnCVSS "${{ inputs.fail_on_cvss }}" \
          --noupdate \
          --enableExperimental \
          --log /src/${{ inputs.out_dir }}/dependency-check.log \
          ${SUPPRESSION_ARG} 2>&1 | tee dependency-check-output.log
        
        EXIT_CODE=$?
        
        if [ $EXIT_CODE -eq 0 ]; then
          echo "Dependency-Check scan completed successfully"
        elif [ $EXIT_CODE -eq 12 ]; then
          echo "Report generation failed, trying JSON format as fallback..."
          
          # Fallback: Try with just JSON format (most reliable)
          timeout $((${{ inputs.timeout }} * 60)) docker run --rm \
            -e JAVA_OPTS="-Xmx2048m -Xms512m" \
            -v "${GITHUB_WORKSPACE}:/src" \
            -w /src \
            "${{ inputs.image }}" \
            --scan "/src/${{ inputs.scan_path }}" \
            --out "/src/${{ inputs.out_dir }}" \
            --format "JSON" \
            --project "${SIMPLE_PROJECT_NAME}" \
            --failOnCVSS "${{ inputs.fail_on_cvss }}" \
            --noupdate \
            --enableExperimental \
            --log /src/${{ inputs.out_dir }}/dependency-check-fallback.log \
            ${SUPPRESSION_ARG} 2>&1 | tee dependency-check-fallback-output.log
          
          FALLBACK_EXIT_CODE=$?
          
          if [ $FALLBACK_EXIT_CODE -eq 0 ]; then
            echo "JSON fallback successful! Report generated in JSON format."
            EXIT_CODE=0
          else
            echo "Fallback also failed with exit code: $FALLBACK_EXIT_CODE"
          fi
        fi
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "ERROR: Dependency-Check failed with exit code: $EXIT_CODE"
          
          # Show detailed error information
          echo "=== Detailed Error Analysis ==="
          if [ $EXIT_CODE -eq 124 ]; then
            echo "ERROR: Command timed out after ${{ inputs.timeout }} minutes"
          elif [ $EXIT_CODE -eq 12 ]; then
            echo "ERROR: Report generation failed"
            echo "This usually indicates an internal error in dependency-check XML writer"
            echo "Common causes:"
            echo "  - Memory issues during large report generation"
            echo "  - XML serialization bugs with certain dependency types"
            echo "  - Character encoding issues in dependency metadata"
          elif [ $EXIT_CODE -eq 2 ]; then
            echo "ERROR: Invalid command line arguments"
            echo "Check the format specification and other parameters"
          fi
          
          # Show any log files that were created
          echo "=== Available log files ==="
          find "${{ inputs.out_dir }}" -name "*.log" -exec echo "Found log: {}" \; -exec cat {} \; 2>/dev/null || echo "No log files found"
          
          # Show the last part of the command output
          echo "=== Last 20 lines of command output ==="
          tail -20 dependency-check-output.log 2>/dev/null || echo "No command output log available"
          
          # Show output directory status for debugging
          echo "=== Output directory status ==="
          ls -la "${{ inputs.out_dir }}" || echo "Output directory not accessible"
          
          # Try a simple test to see if we can write to the output directory
          echo "=== Testing write permissions ==="
          echo "test" > "${{ inputs.out_dir }}/test-write.txt" && echo "Write test successful" || echo "Write test failed"
          rm -f "${{ inputs.out_dir }}/test-write.txt"
          
          exit $EXIT_CODE
        fi

        echo "Dependency-Check completed successfully"

    - name: Check output
      shell: bash
      run: |
        echo "Checking generated reports..."
        if [ -d "${{ inputs.out_dir }}" ]; then
          echo "Output directory contents:"
          ls -la "${{ inputs.out_dir }}"
          
          # Check if any reports were generated
          REPORT_COUNT=$(find "${{ inputs.out_dir }}" -type f | wc -l)
          echo "Generated $REPORT_COUNT report files"
          
          if [ $REPORT_COUNT -eq 0 ]; then
            echo "WARNING: No report files were generated"
          fi
        else
          echo "ERROR: Output directory not found: ${{ inputs.out_dir }}"
          exit 1
        fi

    - name: Upload reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-reports
        path: ${{ inputs.out_dir }}
