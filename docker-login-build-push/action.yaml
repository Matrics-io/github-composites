name: Docker login, build & push action
description: Docker composite that does the login into Google AR, builds and pushes the docker image to AR

inputs:
  image:
    required: true
    description: Docker image name

  context:
    required: true
    default: "."
    description: Docker build context

  dockerfile:
    required: true
    default: "Dockerfile"
    description: Dockerfile name & path

  args:
    required: true
    default: ""
    description: Docker args

  google-region:
    required: true
    description: Google Project Region

  google-credentials:
    required: true
    description: Google Credentials for AR access

  scan_image:
    required: true
    default: 'true'
    description: Scan the builded image before push
  
  scan_output_format:
    description: Grype output format
    required: true
    default: "table"
  
  scan_fail_build:
    description: Fail build if vulnerabilities are found
    required: true
    default: "true"

  scan_severity_cutoff:
    description: Severity cutoff
    required: true
    default: "high"

  scan_cache_db:
    description: Cache database
    required: true
    default: "true"

  push:
    required: true
    default: "true"
    description: Docker push

outputs:
  image:
    description: Image built by this action
    value: ${{ inputs.image }}

runs:
  using: composite
  steps:
    - name: Docker Login to GCP Artifact Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.google-region }}-docker.pkg.dev
        username: _json_key
        password: ${{ inputs.google-credentials }}

    - name: Docker Build
      id: docker-build
      shell: bash
      run: docker build ${{ inputs.args }} -t '${{ inputs.image }}' -f ${{ inputs.dockerfile }} ${{ inputs.context }}

    - name: Grype vulnerability scanner
      id: scan-image
      if: ${{ inputs.scan_image == 'true' }}
      uses: anchore/scan-action@v6
      with:
        image: ${{ inputs.image }}
        output-format: ${{ inputs.scan_output_format }}
        fail-build: ${{ inputs.scan_fail_build }}
        severity-cutoff: ${{ inputs.scan_severity_cutoff }}
        cache-db: ${{ inputs.scan_cache_db }}
    
    - name: Docker Push
      id: docker-push
      if: ${{ inputs.push == 'true' }}
      shell: bash
      run: docker push '${{ inputs.image }}'
